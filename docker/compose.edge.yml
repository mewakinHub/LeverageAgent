version: "3.9"
networks: { public: {}, internal: {} }
volumes: { n8n_data: {}, pg_data: {}, redis_data: {}, qdrant_data: {}, minio_data: {} }
services:
  traefik:
    image: traefik:v3.0
    command: [ "--api.dashboard=${TRAEFIK_DASHBOARD:-true}", "--providers.docker=true", "--providers.docker.exposedbydefault=false", "--entrypoints.web.address=:80" ]
    ports: [ "80:80" ]
    volumes: [ "/var/run/docker.sock:/var/run/docker.sock:ro" ]
    networks: [ public ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${PUBLIC_DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.service=api@internal"
  postgres:
    image: postgres:16-alpine
    environment: { POSTGRES_DB: ${POSTGRES_DB}, POSTGRES_USER: ${POSTGRES_USER}, POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} }
    volumes: [ "pg_data:/var/lib/postgresql/data" ]
    networks: [ internal ]
  redis:
    image: redis:7-alpine
    command: [ "redis-server","--save","","--appendonly","yes" ]
    volumes: [ "redis_data:/data" ]
    networks: [ internal ]
  qdrant:
    image: qdrant/qdrant:latest
    volumes: [ "qdrant_data:/qdrant/storage" ]
    networks: [ internal ]
  minio:
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"
    environment: { MINIO_ROOT_USER: ${S3_ACCESS_KEY}, MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY} }
    volumes: [ "minio_data:/data" ]
    networks: [ internal ]
    ports: [ "9001:9001" ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.${PUBLIC_DOMAIN:-localhost}`)"
      - "traefik.http.services.minio.loadbalancer.server.port=9001"
  n8n-main:
    image: docker.n8n.io/n8nio/n8n:latest
    env_file: .env
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: ${POSTGRES_HOST}
      DB_POSTGRESDB_PORT: ${POSTGRES_PORT}
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: ${REDIS_HOST}
      QUEUE_BULL_REDIS_PORT: ${REDIS_PORT}
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_LOG_LEVEL: info
      N8N_EDITOR_BASE_URL: ${WEBHOOK_URL}
      WEBHOOK_URL: ${WEBHOOK_URL}
    depends_on: [ postgres, redis ]
    volumes: [ "n8n_data:/home/node/.n8n" ]
    networks: [ internal, public ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${PUBLIC_DOMAIN:-localhost}`)"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
  n8n-worker:
    image: docker.n8n.io/n8nio/n8n:latest
    env_file: .env
    command: [ "n8n","worker" ]
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: ${POSTGRES_HOST}
      DB_POSTGRESDB_PORT: ${POSTGRES_PORT}
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: ${REDIS_HOST}
      QUEUE_BULL_REDIS_PORT: ${REDIS_PORT}
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_LOG_LEVEL: info
    depends_on: [ postgres, redis ]
    networks: [ internal ]
  langgraph-api:
    build: { context: ./services/langgraph-api, dockerfile: Dockerfile }
    env_file: .env
    environment:
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_USE_SSL: ${S3_USE_SSL}
      QDRANT_HOST: ${QDRANT_HOST}
      QDRANT_PORT: ${QDRANT_PORT}
    networks: [ internal, public ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${PUBLIC_DOMAIN:-localhost}`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
